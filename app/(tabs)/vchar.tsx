import React, { useState } from 'react';
import { FlatList, StyleSheet, TouchableOpacity, View } from 'react-native';
import { ThemedText } from '../../components/ThemedText';
import { ThemedView } from '../../components/ThemedView';

interface Contact {
  id: string;
  name: string;
  avatar: string;
  status: 'online' | 'offline' | 'away';
  lastSeen?: string;
}

export default function VcharScreen() {
  const [searchQuery, setSearchQuery] = useState('');

  // Ê®°ÊãüËÅîÁ≥ª‰∫∫Êï∞ÊçÆ
  const contacts: Contact[] = [
    { id: '1', name: 'Âº†‰∏â', avatar: 'üë®', status: 'online' },
    { id: '2', name: 'ÊùéÂõõ', avatar: 'üë©', status: 'online' },
    { id: '3', name: 'Áéã‰∫î', avatar: 'üë®‚Äçüíº', status: 'away' },
    { id: '4', name: 'ËµµÂÖ≠', avatar: 'üë©‚Äçüíª', status: 'offline', lastSeen: '2Â∞èÊó∂Ââç' },
    { id: '5', name: 'Èí±‰∏É', avatar: 'üë®‚Äçüé®', status: 'online' },
    { id: '6', name: 'Â≠ôÂÖ´', avatar: 'üë©‚Äçüè´', status: 'offline', lastSeen: 'Êò®Â§©' },
    { id: '7', name: 'Âë®‰πù', avatar: 'üë®‚Äçüî¨', status: 'away' },
    { id: '8', name: 'Âê¥ÂçÅ', avatar: 'üë©‚Äç‚öïÔ∏è', status: 'online' },
    { id: '9', name: 'ÈÉëÂçÅ‰∏Ä', avatar: 'üë®‚Äçüíª', status: 'offline', lastSeen: '3Â§©Ââç' },
    { id: '10', name: 'ÁéãÂçÅ‰∫å', avatar: 'üë©‚Äçüé≠', status: 'online' },
    { id: '11', name: 'ÂÜØÂçÅ‰∏â', avatar: 'üë®‚ÄçüöÄ', status: 'away' },
    { id: '12', name: 'ÈôàÂçÅÂõõ', avatar: 'üë©‚Äçüè≠', status: 'offline', lastSeen: '1Âë®Ââç' },
    { id: '13', name: 'Ë§öÂçÅ‰∫î', avatar: 'üë®‚Äçüéì', status: 'online' },
    { id: '14', name: 'Âç´ÂçÅÂÖ≠', avatar: 'üë©‚Äçüîß', status: 'online' },
    { id: '15', name: 'ËíãÂçÅ‰∏É', avatar: 'üë®‚Äçüåæ', status: 'away' },
  ];

  // ÊåâÂ≠óÊØçÂàÜÁªÑ
  const groupedContacts = contacts.reduce((groups, contact) => {
    const firstLetter = contact.name.charAt(0).toUpperCase();
    if (!groups[firstLetter]) {
      groups[firstLetter] = [];
    }
    groups[firstLetter].push(contact);
    return groups;
  }, {} as Record<string, Contact[]>);

  // ÊéíÂ∫èÂ≠óÊØç
  const sortedLetters = Object.keys(groupedContacts).sort();

  const handleContactPress = (contact: Contact) => {
    console.log('ÁÇπÂáªËÅîÁ≥ª‰∫∫:', contact.name);
    // TODO: ÂØºËà™Âà∞ËÅäÂ§©È°µÈù¢ÊàñËÅîÁ≥ª‰∫∫ËØ¶ÊÉÖÈ°µ
  };

  const renderContactItem = ({ item }: { item: Contact }) => (
    <TouchableOpacity style={styles.contactItem} onPress={() => handleContactPress(item)}>
      <View style={styles.avatarContainer}>
        <ThemedText style={styles.avatar}>{item.avatar}</ThemedText>
        <View style={[styles.statusDot, styles[`status${item.status}`]]} />
      </View>
      <View style={styles.contactInfo}>
        <ThemedText style={styles.contactName}>{item.name}</ThemedText>
        <ThemedText style={styles.contactStatus}>
          {item.status === 'online' ? 'Âú®Á∫ø' :
            item.status === 'away' ? 'Á¶ªÂºÄ' :
              `ÊúÄÂêéÂú®Á∫ø ${item.lastSeen}`}
        </ThemedText>
      </View>
    </TouchableOpacity>
  );

  const renderSectionHeader = ({ item }: { item: string }) => (
    <View style={styles.sectionHeader}>
      <ThemedText style={styles.sectionTitle}>{item}</ThemedText>
    </View>
  );

  const renderSection = ({ item: letter }: { item: string }) => (
    <View key={letter}>
      {renderSectionHeader({ item: letter })}
      {groupedContacts[letter].map(contact => (
        <View key={contact.id}>
          {renderContactItem({ item: contact })}
        </View>
      ))}
    </View>
  );

  return (
    <ThemedView style={styles.container}>
      {/* Â§¥ÈÉ® */}
      <View style={styles.header}>
        <ThemedText style={styles.title}>ÈÄöËÆØÂΩï</ThemedText>
        <TouchableOpacity style={styles.addButton}>
          <ThemedText style={styles.addIcon}>+</ThemedText>
        </TouchableOpacity>
      </View>

      {/* ÊêúÁ¥¢Ê†è */}
      <View style={styles.searchContainer}>
        <ThemedText style={styles.searchIcon}>üîç</ThemedText>
        <ThemedText style={styles.searchPlaceholder}>ÊêúÁ¥¢ËÅîÁ≥ª‰∫∫...</ThemedText>
      </View>

      {/* ËÅîÁ≥ª‰∫∫ÂàóË°® */}
      <FlatList
        data={sortedLetters}
        renderItem={renderSection}
        keyExtractor={(item) => item}
        style={styles.contactList}
        showsVerticalScrollIndicator={false}
      />
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 60,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  title: {
    fontSize: 20,
    fontWeight: 'bold',
  },
  addButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#007AFF',
    justifyContent: 'center',
    alignItems: 'center',
  },
  addIcon: {
    color: 'white',
    fontSize: 24,
    fontWeight: 'bold',
  },
  searchContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F5F5F5',
    marginHorizontal: 20,
    marginBottom: 20,
    paddingHorizontal: 15,
    paddingVertical: 12,
    borderRadius: 10,
  },
  searchIcon: {
    fontSize: 16,
    marginRight: 10,
    opacity: 0.6,
  },
  searchPlaceholder: {
    fontSize: 16,
    color: '#999',
  },
  contactList: {
    flex: 1,
  },
  sectionHeader: {
    backgroundColor: '#F8F8F8',
    paddingHorizontal: 20,
    paddingVertical: 8,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#007AFF',
  },
  contactItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 12,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: '#E5E5E5',
  },
  avatarContainer: {
    position: 'relative',
    marginRight: 15,
  },
  avatar: {
    fontSize: 40,
  },
  statusDot: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    width: 12,
    height: 12,
    borderRadius: 6,
    borderWidth: 2,
    borderColor: 'white',
  },
  statusonline: {
    backgroundColor: '#4CD964',
  },
  statusaway: {
    backgroundColor: '#FF9500',
  },
  statusoffline: {
    backgroundColor: '#8E8E93',
  },
  contactInfo: {
    flex: 1,
  },
  contactName: {
    fontSize: 16,
    fontWeight: '500',
    marginBottom: 4,
  },
  contactStatus: {
    fontSize: 14,
    opacity: 0.6,
  },
});
